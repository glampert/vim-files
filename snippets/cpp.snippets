extends c

#
# C++ code snippets:
# Note: Some options are kept from the C snippets file.
#
# Based on the C++ snippets found at <https://github.com/honza/vim-snippets>
#

# --------------------------------
# Header comment for my C++ files
snippet head
	// ================================================================================================
	// -*- C++ -*-
	// File: `Filename('', 'UNTITLED').'.'.expand("%:e")`
	// Author: Guilherme R. Lampert
	// Created on: `strftime("%d/%m/%y")`
	// Brief: ${1:...}
	// ================================================================================================
	${2}
# --------------------------------

# --------------------------------
# main() with args
snippet main
	int main(const int argc, const char * argv[])
	{
		${1}
	}
# --------------------------------

# --------------------------------
# main() with no args (void)
snippet mainv
	int main()
	{
		${1}
	}
# --------------------------------

# --------------------------------
# include <...>
snippet inc
	#include <${1:iostream}>${2}
# --------------------------------

# --------------------------------
# include "..."
snippet Inc
	#include "${1:`Filename("$1")`}.hpp"${2}
# --------------------------------

# -----------------------------------------------
# More preprocessor directives:
# -----------------------------------------------

# --------------------------------
snippet def
	#define ${1:value}
# --------------------------------
snippet Def
	#ifndef $1
	    #define ${1:SYMBOL} ${2:value}
	#endif // $1${3}
# --------------------------------
snippet ifdef
	#ifdef ${1:FOO}
	    ${2:#define}
	#endif // $1
# --------------------------------
snippet #if
	#if ${1:FOO}
	    ${2}
	#endif // $1
# --------------------------------

# --------------------------------
# Header include-guard
snippet once
	#ifndef ${1:`toupper(Filename('$1', 'UNTITLED'))`}`'_'.toupper(expand("%:e"))`
	#define $1_`toupper(expand("%:e"))`

	${2}

	#endif // $1_`toupper(expand("%:e"))`
# --------------------------------

# --------------------------------
# pragma once directive
snippet ponce
	#pragma once
	${1}
# --------------------------------

# --------------------------------
# namespace
snippet ns
	namespace ${1:`Filename('', 'MyNamespace')`}
	{
		${2}
	} // namespace $1 {}
# --------------------------------

# --------------------------------
# if statement
snippet if
	if (${1:/* condition */})
	{
		${2:/* code */}
	}
# --------------------------------

# --------------------------------
# else statement
snippet el
	else
	{
		${1}
	}
# --------------------------------

# --------------------------------
# else-if statement
snippet elif
	else if (${1:/* condition */})
	{
		${2:/* code */}
	}
# --------------------------------

# --------------------------------
# do-while loop
snippet do
	do
	{
		${2:/* code */}
	} while (${1:/* condition */});
# --------------------------------

# --------------------------------
# while loop
snippet wh
	while (${1:/* condition */})
	{
		${2:/* code */}
	}
# --------------------------------

# --------------------------------
# for loop
snippet for
	for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++}$2)
	{
		${5:/* code */}
	}
# --------------------------------

# --------------------------------
# custom for loop
snippet forr
	for (${5:int} ${1:i} = ${2:0}; ${3:$1 < 10}; ${4:++}$1)
	{
		${6:/* code */}
	}
# --------------------------------

# --------------------------------
# foreach / range-base for loop
snippet fore
	for (${1:const auto &} ${2:i} : ${3:container})
	{
		${4}
	}
# --------------------------------

# --------------------------------
# switch-case statement
snippet sw
	switch (${1:/* value */})
	{
	case ${2} :
		break;

	default :
		break;
	} // switch ($1)
# --------------------------------

# --------------------------------
# Generic function declaration
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
# --------------------------------

# --------------------------------
# Template function declaration
snippet tfun
	template<typename ${1:T}>
	${2:$1} ${3:function_name}(${4})
	{
		${5:/* code */}
	}
# --------------------------------

# -----------------------------------------------
# STL containers:
# -----------------------------------------------

# --------------------------------
# std::map
snippet map
	std::map<${1:Key}, ${2:Value}> ${3:m};${4}
# --------------------------------
# std::unordered_map
snippet umap
	std::unordered_map<${1:Key}, ${2:Value}> ${3:um};${4}
# --------------------------------
# std::set
snippet set
	std::set<${1:T}> ${2:s};${3}
# --------------------------------
# std::unordered_set
snippet uset
	std::unordered_set<${1:T}> ${2:us};${3}
# --------------------------------
# std::vector
snippet vector
	std::vector<${1:T}> ${2:v};${3}
# --------------------------------
# std::list
snippet list
	std::list<${1:T}> ${2:l};${3}
# --------------------------------
# std::forward_list
snippet fwlist
	std::forward_list<${1:T}> ${2:l};${3}
# --------------------------------
# std::stack
snippet stack
	std::stack<${1:T}> ${2:s};${3}
# --------------------------------
# std::queue
snippet queue
	std::queue<${1:T}> ${2:q};${3}
# --------------------------------
# std::deque
snippet deque
	std::deque<${1:T}> ${2:d};${3}
# --------------------------------
# std::unique_ptr
snippet uptr
	std::unique_ptr<${1:T}> ${2:p};${3}
# --------------------------------
# std::shared_ptr
snippet sptr
	std::shared_ptr<${1:T}> ${2:p};${3}
# --------------------------------

# -----------------------------------------------
# IO helpers:
# -----------------------------------------------

# --------------------------------
# std::cout
snippet cout
	std::cout << ${1:output}${2: << "\n"};${3}
# --------------------------------
# std::cin
snippet cin
	std::cin >> ${1:input};${2}
# --------------------------------
# std::printf
snippet pr
	std::printf("${1:%s}\n"${2});${3}
# --------------------------------
# std::fprintf
snippet fpr
	std::fprintf(${1:fp}, "${2:%s}\n"${3});${4}
# --------------------------------
# std::snprintf
snippet spr
	std::snprintf(${1:buffer}, ${2:sizeof(buffer)}, "${3:%s}"${4});${5}
# --------------------------------
# std::scanf
snippet scanf
	std::scanf("${1:%s}"${2});${3}
# --------------------------------
# std::fscanf
snippet fscanf
	std::fscanf(${1:fp}, "${2:%s}"${3});${4}
# --------------------------------
# std::sscanf
snippet sscanf
	std::sscanf(${1:buffer}, "${2:%s}"${3});${4}
# --------------------------------

# -----------------------------------------------
# Enum, class, struct:
# -----------------------------------------------

# --------------------------------
# Old-style enum
snippet enum
	enum ${1:`Filename('', 'MyEnum')`}
	{
		${2}
	};
# --------------------------------

# --------------------------------
# enum class (C++11)
snippet enumc
	enum class ${1:`Filename('', 'MyEnum')`} ${2:: Type}
	{
		${3}
	};
# --------------------------------

# --------------------------------
# Class
snippet class
	class ${1:`Filename('$1', 'MyClass')`}
	{
	public:
		${2}
	private:
		${3}
	};
# --------------------------------

# --------------------------------
# Template class
snippet tclass
	template<typename ${1:T}>
	class ${2:`Filename('$1', 'MyTClass')`}
	{
	public:
		${3}
	private:
		${4}
	};
# --------------------------------

# --------------------------------
# struct
snippet struct
	struct ${1:`Filename('$1', 'MyClass')`}
	{
		${2}
	};
# --------------------------------

# --------------------------------
# 'using' type alias
snippet talias
	using ${1:Alias} = ${2:Type};${3}
# --------------------------------

# -----------------------------------------------
# C++ casts:
# -----------------------------------------------

# --------------------------------
# static
snippet scast
	static_cast<${1:int}>(${2:expr})${3}
# --------------------------------
# dynamic
snippet dcast
	dynamic_cast<${1}>(${2:expr})${3}
# --------------------------------
# reinterpret
snippet rcast
	reinterpret_cast<${1}>(${2:expr})${3}
# --------------------------------
# const
snippet ccast
	const_cast<${1}>(${2:expr})${3}
# --------------------------------

# -----------------------------------------------
# Lambdas:
# -----------------------------------------------

# --------------------------------
# lambda (one-liner)
snippet lambda
	[${1}](${2}) { ${3} }
# --------------------------------

# --------------------------------
# lambda (multi-line)
snippet lambda2
	[${1}](${2})
	{
		${3}
	};
# --------------------------------

# -----------------------------------------------
# Sized C++ types:
# -----------------------------------------------

# --------------------------------
snippet i8
	std::int8_t
snippet u8
	std::uint8_t
# --------------------------------
snippet i16
	std::int16_t
snippet u16
	std::uint16_t
# --------------------------------
snippet i32
	std::int32_t
snippet u32
	std::uint32_t
# --------------------------------
snippet i64
	std::int64_t
snippet u64
	std::uint64_t
# --------------------------------

