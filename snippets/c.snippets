#
# ANSI-C code snippets:
#
# Based on the C snippets found at <https://github.com/honza/vim-snippets>
#

# --------------------------------
# Header comment for my C files
snippet head
	/* ================================================================================================
	 * -*- C -*-
	 * File: `Filename('', 'UNTITLED').'.'.expand("%:e")`
	 * Author: Guilherme R. Lampert
	 * Created on: `strftime("%d/%m/%y")`
	 * Brief: ${1:...}
	 * ================================================================================================ */
	${2}
# --------------------------------

# --------------------------------
# main() with args
snippet main
	int main(int argc, const char * argv[]) {

		${1}
		return 0;
	}
# --------------------------------

# --------------------------------
# main() with no args (void)
snippet mainv
	int main(void) {

		${1}
		return 0;
	}
# --------------------------------

# -----------------------------------------------
# Preprocessor directives:
# -----------------------------------------------

# --------------------------------
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# --------------------------------
# #include "..."
snippet Inc
	#include "${1:`Filename("$1")`}.h"${2}
# --------------------------------
snippet def
	#define ${1:value}
# --------------------------------
snippet Def
	#ifndef $1
	    #define ${1:SYMBOL} ${2:value}
	#endif /* $1 */${3}
# --------------------------------
snippet ifdef
	#ifdef ${1:FOO}
	    ${2:#define }
	#endif /* $1 */
# --------------------------------
snippet #if
	#if ${1:FOO}
	    ${2}
	#endif /* $1 */
# --------------------------------

# --------------------------------
# Header include-guard
snippet once
	#ifndef ${1:`toupper(Filename('$1', 'UNTITLED'))`}`'_'.toupper(expand("%:e"))`
	#define $1_`toupper(expand("%:e"))`

	${2}

	#endif /* $1_`toupper(expand("%:e"))` */
# --------------------------------

# --------------------------------
# if statement
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
# --------------------------------

# --------------------------------
# else statement
snippet el
	else {
		${1}
	}
# --------------------------------

# --------------------------------
# else-if statement
snippet elif
	else if (${1:/* condition */}) {
		${2:/* code */}
	}
# --------------------------------

# --------------------------------
# do-while loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});

# --------------------------------
# while Loop
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# --------------------------------

# --------------------------------
# for loop
snippet for
	for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++}$2) {
		${5:/* code */}
	}
# --------------------------------

# --------------------------------
# custom for loop
snippet forr
	for (${5:int} ${1:i} = ${2:0}; ${3:$1 < 10}; ${4:++}$1) {
		${6:/* code */}
	}
# --------------------------------

# --------------------------------
# switch-case statement
snippet sw
	switch (${1:/* value */}) {
	case ${2} :
		break;
	default :
		break;
	} /* switch ($1) */
# --------------------------------

# --------------------------------
# Function
snippet fun
	${1:void} ${2:function_name}(${3}) {

		${4:/* code */}
	}
# --------------------------------

# --------------------------------
# Function Declaration
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# --------------------------------

# --------------------------------
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# --------------------------------

# --------------------------------
# Typedef struct
snippet tds
	typedef struct ${2}{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# --------------------------------

# --------------------------------
# Typdef enum
snippet tde
	typedef enum {
		${1:/* constants */}
	} ${2:foo};
# --------------------------------

# --------------------------------
# printf
snippet pr
	printf("${1:%s}\n"${2});${3}
# --------------------------------

# --------------------------------
# fprintf
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
# --------------------------------

# --------------------------------
# Turns a .<TAB> into a []
snippet .
	[${1}]${2}
# --------------------------------

# -----------------------------------------------
# Commonly used unsiged types:
# -----------------------------------------------

# --------------------------------
snippet uc
	unsigned char
snippet us
	unsigned short
snippet ui
	unsigned int
snippet ul
	unsigned long
snippet ull
	unsigned long long
# --------------------------------
snippet u
	unsigned
snippet s
	signed
# --------------------------------

# -----------------------------------------------
# Sized stdint.h types:
# -----------------------------------------------

# --------------------------------
snippet i8
	int8_t
snippet u8
	uint8_t
# --------------------------------
snippet i16
	int16_t
snippet u16
	uint16_t
# --------------------------------
snippet i32
	int32_t
snippet u32
	uint32_t
# --------------------------------
snippet i64
	int64_t
snippet u64
	uint64_t
# --------------------------------

